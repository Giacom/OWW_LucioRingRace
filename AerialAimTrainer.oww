settings
{
	main
	{
		Description: "v1.3.4 Aerial Aim Trainer by /u/Giacomand -  Shoot the spheres to control the spawn distance. https://workshop.codes/TKBR3"
	}

	lobby
	{
		Max Team 2 Players: 0
	}

	modes
	{
		Control
		{
			Limit Valid Control Points: First

			enabled maps
			{
				Lijiang Tower
			}
		}

		General
		{
			Game Mode Start: Manual
			Hero Limit: Off
			Respawn Time Scalar: 0%
		}
	}

	heroes
	{
		Team 2
		{
			Primary Fire: Off
			Quick Melee: Off
			Ultimate Ability: Off

			Ana
			{
				Biotic Grenade: Off
				Primary Fire: Off
				Quick Melee: Off
				Sleep Dart: Off
				Ultimate Ability Nano Boost: Off
			}

			Bastion
			{
				Primary Fire: Off
				Quick Melee: Off
				Reconfigure: Off
				Self-Repair: Off
				Ultimate Ability Configuration: Tank: Off
			}

			Lúcio
			{
				Amp It Up: Off
				Crossfade: Off
				Primary Fire: Off
				Quick Melee: Off
				Soundwave: Off
				Ultimate Ability Sound Barrier: Off
			}

			McCree
			{
				Combat Roll: Off
				Flashbang: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Deadeye: Off
			}

			Mei
			{
				Cryo-Freeze: Off
				Ice Wall: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Blizzard: Off
			}

			Reaper
			{
				Primary Fire: Off
				Quick Melee: Off
				Shadow Step: Off
				Ultimate Ability Death Blossom: Off
				Wraith Form: Off
			}

			Roadhog
			{
				Chain Hook: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Take a Breather: Off
				Ultimate Ability Whole Hog: Off
			}

			Soldier: 76
			{
				Biotic Field: Off
				Helix Rockets: Off
				Primary Fire: Off
				Quick Melee: Off
				Sprint: Off
				Ultimate Ability Tactical Visor: Off
			}

			Sombra
			{
				Hack: Off
				Primary Fire: Off
				Quick Melee: Off
				Stealth: Off
				Translocator: Off
				Ultimate Ability EMP: Off
			}

			Torbjörn
			{
				Deploy Turret: Off
				Overload: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Molten Core: Off
			}

			Zarya
			{
				Particle Barrier: Off
				Primary Fire: Off
				Projected Barrier: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Graviton Surge: Off
			}

			Zenyatta
			{
				Orb of Discord: Off
				Orb of Harmony: Off
				Primary Fire: Off
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Transcendence: Off
			}
		}

		General
		{
			Ability Cooldown Time: 0%
		}
	}
}

variables
{
	global:
		0: BotDistance
		1: ForwardButton
		2: BackwardButton
		3: SetRandomFacingButton
		4: SetRandomFacing
		5: JumpPadPosition
		6: RandomDummyPool
		7: RandomDummyPoolIndex
		8: UnlimitedAmmo
		9: UnlimitedAmmoButton
		22: BapWaitingForOrders
		23: MercyButton
		24: AnaButton
		25: BaptisteButton

	player:
		2: DamageFloatPos
		3: DamageGiven
		4: DamageFloatTimer
		5: DamageFloatWasCritical
		6: LastDamaged
}

rule("INIT: Debug")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, String("-> {0}", Facing Direction Of(Event Player)), Null, Null, Left, 0, White, White, White,
			String, Default Visibility);
		Create HUD Text(Event Player, String("-> {0}", Position Of(Event Player)), Null, Null, Left, 0, White, White, White, String,
			Default Visibility);
	}
}

rule("INIT: Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Match Time(9999);
		Global.BotDistance = -10;
		Create In-World Text(All Players(All Teams), String("Start"), Vector(70.595, 6.061, -32.100), 1.500, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Crouch + Interact = Ult"), Vector(72.013, 6.750, -26.599), 1.500,
			Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Attack"), String("Spheres")), Vector(-5.800, 5, -77.550),
			1.500, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0}: {1}", String("Distance"), Global.BotDistance), Vector(-5.800, 4.500,
			-77.550), 1.500, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Global.ForwardButton = Vector(-5.800, 2.500, -79.200);
		Create Effect(All Players(All Teams), Sphere, Green, Global.ForwardButton, 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("Forward"), Global.ForwardButton, 1, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Global.BackwardButton = Vector(-5.800, 2.500, -75.900);
		Create Effect(All Players(All Teams), Sphere, Blue, Global.BackwardButton, 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("Backward"), Global.BackwardButton, 1, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Global.SetRandomFacingButton = Vector(0, 2.500, -73.500);
		Global.SetRandomFacing = False;
		Create In-World Text(All Players(All Teams), Custom String("Random Direction Bots: {0}", Global.SetRandomFacing),
			Global.SetRandomFacingButton, 1, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Lime Green, Global.SetRandomFacingButton, 1, Visible To Position and Radius);
		Global.JumpPadPosition = Vector(1.315, 0.400, -73.589);
		Create Effect(All Players(All Teams), Ring, Green, Global.JumpPadPosition, 1, Visible To Position and Radius);
		Global.UnlimitedAmmoButton = Vector(0, 5, -73.500);
		Global.UnlimitedAmmo = False;
		Create In-World Text(All Players(All Teams), Custom String("Infinite* Ammo", Global.UnlimitedAmmoButton),
			Global.UnlimitedAmmoButton, 1, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Lime Green, Global.UnlimitedAmmoButton, 1, Visible To Position and Radius);
	}
}

rule("INIT: Random Dummy Pool")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.RandomDummyPool = Empty Array;
		Global.RandomDummyPoolIndex = 0;
		Modify Global Variable(RandomDummyPool, Append To Array, All Tank Heroes);
		Modify Global Variable(RandomDummyPool, Append To Array, All Damage Heroes);
		Modify Global Variable(RandomDummyPool, Append To Array, All Damage Heroes);
		Modify Global Variable(RandomDummyPool, Append To Array, All Damage Heroes);
		Modify Global Variable(RandomDummyPool, Append To Array, All Support Heroes);
		Modify Global Variable(RandomDummyPool, Append To Array, All Support Heroes);
		Modify Global Variable(RandomDummyPool, Append To Array, All Support Heroes);
		Global.RandomDummyPool = Randomized Array(Global.RandomDummyPool);
	}
}

rule("Spawn new Dummy")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(All Players(Team 2)) != 6;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Create Dummy Bot(Global.RandomDummyPool[Global.RandomDummyPoolIndex], Team 2, -1, Vector(0, -12, 0), Vector(0, 0, 0));
		Global.RandomDummyPoolIndex += 1;
		Skip If(Global.RandomDummyPoolIndex < Count Of(Global.RandomDummyPool), 2);
		Global.RandomDummyPoolIndex = 0;
		Global.RandomDummyPool = Randomized Array(Global.RandomDummyPool);
		Loop If Condition Is True;
	}
}

rule("Despawn Bot")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	actions
	{
		Wait(2, Ignore Condition);
		disabled Resurrect(Event Player);
		Destroy Dummy Bot(Team 2, Slot Of(Event Player));
	}
}

rule("Bounce Zone")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) < -10.800;
	}

	actions
	{
		Set Status(Event Player, Null, Rooted, 9999);
		Teleport(Event Player, Vector(Random Real(-20, 20), Random Real(-9, -8), Global.BotDistance + -90));
		Apply Impulse(Event Player, Vector(X Component Of(Position Of(Event Player)) * -1, Random Real(35, 45), 0), Random Real(24, 30),
			To World, Cancel Contrary Motion);
		Stop Facing(Event Player);
		Skip If(Global.SetRandomFacing == False, 2);
		Set Facing(Event Player, Vector(Random Real(-1, 1), 0, Random Real(-1, 1)), To World);
		Skip(1);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Host Player)), 100, To World,
			Direction and Turn Rate);
		Skip If(Event Player.DamageFloatTimer > 0, 1);
		Heal(Event Player, Null, Max Health(Event Player) * 0.100);
	}
}

rule("TP Players")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Loop If(Is In Spawn Room(Event Player));
		Teleport(Event Player, Vector(1, 3.300, -77));
		Set Facing(Event Player, Vector(0, 0, -1), To World);
	}
}

rule("Move Bots Forward")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Distance Between(Global.ForwardButton, Ray Cast Hit Position(Eye Position(Event Player), Facing Direction Of(Event Player)
			* Distance Between(Event Player, Global.ForwardButton) + Eye Position(Event Player), Null, All Players(All Teams), False))
			<= 1;
	}

	actions
	{
		Global.BotDistance = Min(0, Global.BotDistance + 5);
		Play Effect(Event Player, Ring Explosion Sound, White, Event Player, 50);
	}
}

rule("Move Bots Backwards")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Distance Between(Global.BackwardButton, Ray Cast Hit Position(Eye Position(Event Player), Facing Direction Of(Event Player)
			* Distance Between(Event Player, Global.BackwardButton) + Eye Position(Event Player), Null, All Players(All Teams), False))
			<= 1;
	}

	actions
	{
		Global.BotDistance = Max(-100, Global.BotDistance - 5);
		Play Effect(Event Player, Buff Explosion Sound, White, Event Player, 50);
	}
}

rule("Toggle Random Facing")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Distance Between(Global.SetRandomFacingButton, Ray Cast Hit Position(Eye Position(Event Player), Facing Direction Of(Event Player)
			* Distance Between(Event Player, Global.SetRandomFacingButton) + Eye Position(Event Player), Null, All Players(All Teams),
			False)) <= 1;
	}

	actions
	{
		Global.SetRandomFacing = !Global.SetRandomFacing;
		Play Effect(Event Player, Explosion Sound, White, Event Player, 50);
	}
}

rule("Set Infinite Ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Distance Between(Global.UnlimitedAmmoButton, Ray Cast Hit Position(Eye Position(Event Player), Facing Direction Of(Event Player)
			* Distance Between(Event Player, Global.UnlimitedAmmoButton) + Eye Position(Event Player), Null, All Players(All Teams),
			False)) <= 1;
	}

	actions
	{
		Set Max Ammo(Event Player, 0, 999);
		Set Ammo(Event Player, 0, 999);
		Set Max Ammo(Event Player, 1, 999);
		Set Ammo(Event Player, 1, 999);
		Play Effect(Event Player, Explosion Sound, White, Event Player, 50);
	}
}

rule("Hitpoint Float - Init")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create In-World Text(Filtered Array(Event Player,
			Event Player.DamageFloatTimer > 0 && Event Player.DamageFloatWasCritical == False), Round To Integer(Event Player.DamageGiven,
			Down), Event Player.DamageFloatPos, 2, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Create In-World Text(Filtered Array(Event Player,
			Event Player.DamageFloatTimer > 0 && Event Player.DamageFloatWasCritical == True), Round To Integer(Event Player.DamageGiven,
			Down), Event Player.DamageFloatPos, 2, Clip Against Surfaces, Visible To Position and String, Yellow, Default Visibility);
	}
}

rule("Hitpoint Float - Damage Given")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	actions
	{
		If(Event Player.LastDamaged != Victim);
			Event Player.DamageGiven = 0;
		End;
		Event Player.DamageGiven += Event Damage;
		Chase Player Variable Over Time(Event Player, DamageFloatTimer, 0, 2, None);
		Event Player.DamageFloatTimer = 2;
		Event Player.DamageFloatPos = Position Of(Victim) + Vector(0, 1, 0);
		Chase Player Variable Over Time(Event Player, DamageFloatPos, Event Player.DamageFloatPos + Vector(0, 2, 0), 4, None);
		Event Player.DamageFloatWasCritical = Event Was Critical Hit;
		Event Player.LastDamaged = Victim;
	}
}

rule("Hitpoint Float - Float Finished")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.DamageFloatTimer <= 0;
	}

	actions
	{
		Event Player.DamageGiven = 0;
	}
}

rule("Jump Pad")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.JumpPadPosition, Event Player) <= 1.500;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 1, 0), 15, To World, Incorporate Contrary Motion);
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Event Player, 50);
	}
}

rule("== PMA Jellies Code ==")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.MercyButton = Vector(6, 2.500, -75.992);
		Global.AnaButton = Vector(0, 0, -1.500) + Global.MercyButton;
		Global.BaptisteButton = Vector(0, 0, -3) + Global.MercyButton;
	}
}

rule("Effects")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Blue, Global.AnaButton, 0.400, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Hero Icon String(Hero(Ana)), Global.AnaButton, 2, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Turquoise, Global.BaptisteButton, 0.400, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Hero Icon String(Hero(Baptiste)), Global.BaptisteButton, 2, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Yellow, Global.MercyButton, 0.400, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Hero Icon String(Hero(Mercy)), Global.MercyButton, 2, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		disabled Create Effect(All Players(All Teams), Ring, Green, Vector(56.613, -0.574, -7.100), 1, Visible To Position and Radius);
	}
}

rule("Mercy Pocket Part 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Global.MercyButton, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * Distance Between(Eye Position(Event Player), Global.MercyButton), Null, Event Player,
			False)) <= 0.400;
		Is Button Held(Event Player, Primary Fire) == True;
		Hero Of(Event Player) != Hero(Mercy);
	}

	actions
	{
		Skip If(Global.P == Event Player, 5);
		Create Dummy Bot(Hero(Mercy), Team 1, -1, Position Of(Event Player), Direction Towards(Position Of(Event Player), Eye Position(
			Event Player)));
		Global.P = Event Player;
		Start Facing(Players On Hero(Hero(Mercy), Team 1), Direction Towards(Eye Position(Players On Hero(Hero(Mercy), Team 1)),
			Eye Position(Event Player)), 1000, To World, Direction and Turn Rate);
		Start Holding Button(Players On Hero(Hero(Mercy), Team 1), Secondary Fire);
		Abort;
		Destroy Dummy Bot(Team 1, Slot Of(Players On Hero(Hero(Mercy), Team 1)));
		Global.P = Null;
	}
}

rule("Mercy Pocket Part 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Position Of(Global.P)) >= 3;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Ability 1);
	}
}

rule("Mercy Pocket Part 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		(Is In Line of Sight(Eye Position(Event Player), Eye Position(Global.P), Barriers Do Not Block LOS) == False || Distance Between(
			Event Player, Position Of(Event Player)) >= 14) == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Position Of(Global.P));
	}
}

rule("Free Ult [Crouch + Interact]")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("Ana Nano Boost")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Global.AnaButton, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * Distance Between(Eye Position(Event Player), Global.AnaButton), Null, Event Player,
			False)) <= 0.400;
		Is Button Held(Event Player, Primary Fire) == True;
		Hero Of(Event Player) != Hero(Ana);
	}

	actions
	{
		Small Message(Event Player, 3);
		Wait(1, Ignore Condition);
		Small Message(Event Player, 2);
		Wait(1, Ignore Condition);
		Small Message(Event Player, 1);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Ana), Team 1, -1, Position Of(Event Player) - Facing Direction Of(Event Player), Direction Towards(
			Position Of(Event Player) - Facing Direction Of(Event Player), Eye Position(Event Player)));
		Start Facing(Players On Hero(Hero(Ana), Team 1), Direction Towards(Eye Position(Players On Hero(Hero(Ana), Team 1)), Eye Position(
			Event Player)), 5100, To World, Direction and Turn Rate);
		Wait(0.050, Ignore Condition);
		Set Ultimate Charge(Players On Hero(Hero(Ana), Team 1), 100);
		Wait(0.250, Ignore Condition);
		Press Button(Players On Hero(Hero(Ana), Team 1), Ultimate);
		Wait(8, Ignore Condition);
		Destroy Dummy Bot(Team 1, Slot Of(Players On Hero(Hero(Ana), Team 1)));
	}
}

rule("Baptiste Amplification Matrix Part 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Global.BaptisteButton, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * Distance Between(Eye Position(Event Player), Global.BaptisteButton), Null, Event Player,
			False)) <= 0.400;
		Is Button Held(Event Player, Primary Fire) == True;
		Global.BapWaitingForOrders == False;
		Hero Of(Event Player) != Hero(Baptiste);
	}

	actions
	{
		Create Dummy Bot(Hero(Baptiste), Team 1, -1, Position Of(Event Player), Facing Direction Of(Event Player));
		Start Facing(Players On Hero(Hero(Baptiste), Team 1), Facing Direction Of(Event Player), 500, To World, Direction and Turn Rate);
		Wait(0.050, Ignore Condition);
		Set Ultimate Charge(Players On Hero(Hero(Baptiste), Team 1), 100);
		Wait(0.050, Ignore Condition);
		Press Button(Players On Hero(Hero(Baptiste), Team 1), Ultimate);
		Global.BapWaitingForOrders = True;
	}
}

rule("Baptiste Amplification Matrix Part 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.BapWaitingForOrders == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Press Button(Players On Hero(Hero(Baptiste), Team 1), Primary Fire);
		Wait(10.500, Ignore Condition);
		Destroy Dummy Bot(Team 1, Slot Of(Players On Hero(Hero(Baptiste), All Teams)));
		Global.BapWaitingForOrders = False;
	}
}
